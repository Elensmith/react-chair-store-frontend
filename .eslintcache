[{"/Users/elena/Documents/тестовые задания/процессы/react-chair-store-frontend/src/index.js":"1","/Users/elena/Documents/тестовые задания/процессы/react-chair-store-frontend/src/App.js":"2","/Users/elena/Documents/тестовые задания/процессы/react-chair-store-frontend/src/reportWebVitals.js":"3","/Users/elena/Documents/тестовые задания/процессы/react-chair-store-frontend/src/components/Card.jsx":"4","/Users/elena/Documents/тестовые задания/процессы/react-chair-store-frontend/src/components/Popup.jsx":"5"},{"size":500,"mtime":1610696733481,"results":"6","hashOfConfig":"7"},{"size":4086,"mtime":1610955577573,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1610696733483,"results":"9","hashOfConfig":"7"},{"size":519,"mtime":1610915703444,"results":"10","hashOfConfig":"7"},{"size":2101,"mtime":1610914448982,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"j1na2t",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/elena/Documents/тестовые задания/процессы/react-chair-store-frontend/src/index.js",[],["25","26"],"/Users/elena/Documents/тестовые задания/процессы/react-chair-store-frontend/src/App.js",["27"],"import React from \"react\";\nimport './App.css';\nimport Card from \"./components/Card\";\nimport Popup from \"./components/Popup\"\nimport emailjs from \"emailjs-com\";\n\n\nfunction App() {\n  const cardsJSON = require(\"./utils/cards.json\");\n  const [cards, setCards] = React.useState([]);\n  const [isPopupOpen, setIsPopupOpen] = React.useState(false);\n  const [values, setValues] = React.useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    clickedItem: \"\"\n  });\n  const [errors, setErrors] = React.useState({\n    nameError: null,\n    emailError: null,\n    phoneError: null\n  });\n\n  const nameRegex = RegExp(/[A-Za-zА-Яа-я]{2,20}/);\n  const emailRegex = RegExp(/^([a-zA-Z0-9]+[-_.]*[a-zA-Z0-9]+|[a-zA-Z0-9]+)@[-a-zA-Z0-9]+[.][a-zA-Z.]{2,}$/);\n  const phoneRegex = RegExp(/^[+]?[\\d]([(][\\d]{3}[)][\\s]?[\\d]{3}[-][\\d]{2}[-][\\d]{2}|[\\d]{10}|[\\s]([\\d]{3}[-])+[\\d]{2}[-][\\d]{2})/);\n  \n  function handleSubmit(e) {\n    e.preventDefault();\n\n    let empty = false;\n\n    if (values.name === undefined) {\n      setErrors({nameError:\"Заполните это поле\"});\n      empty = true;\n      return empty;\n    } \n    if (values.email === undefined) {\n      setErrors({emailError:\"Заполните это поле\"});\n      empty = true;\n      return empty;\n    }\n    if (values.phone === undefined) {\n      setErrors({phoneError:\"Заполните это поле\"});\n      empty = true;\n      return empty;\n    }\n\n    if ((errors.nameError === undefined || errors.nameError === null) && (errors.emailError === undefined || errors.emailError === null) && (errors.phoneError === undefined || errors.phoneError === null) && !empty) {\n\n      const templateParams = {name: values.name, email: values.email, phone: values.phone, item: values.clickedItem}\n\n      // вариант для гитхаб\n      alert(\"Эти данныe уйдут на почту: Имя: \" + templateParams.name + \" Email: \" + templateParams.email + \" Телефон: \" + templateParams.phone + \" Название товара: \" + templateParams.item);\n\n      // отправка данных на почту\n      // emailjs.send('gmail', 'template_id', templateParams, 'user_id')\n      // .then((result) => {\n      //     console.log(result.text);\n      // }, (error) => {\n      //     console.log(error.text);\n      // });\n      setIsPopupOpen(false);\n    }\n  }\n\n  function handleInputChange(e) {\n    const { name, value } = e;\n    setValues({\n      ...values,\n      [name]: value\n    });\n\n\n    switch (name) {\n      case \"name\":\n        nameRegex.test(value) && value.length > 0 \n        ?  setErrors({nameError:null})\n        :  setErrors({nameError:\"Введите имя от 2 до 20 символов\"});\n        break;\n      case \"email\":\n        emailRegex.test(value) && value.length > 0 \n        ?  setErrors({emailError:null})\n        :  setErrors({emailError:\"Введите корректный email\"});\n        break;\n      case \"phone\":\n        phoneRegex.test(value) && value.length > 0 \n      ?  setErrors({phoneError:null})\n      :  setErrors({phoneError:\"Введите номер телефона\"});\n        break;\n      default:\n        break;\n    }\n  }\n\n  function handlerCardButtonClick(e) {\n    setValues({clickedItem: e.target.parentNode.childNodes[1].innerText})\n    setIsPopupOpen(true);\n  }\n\n  function closePopup() {\n    setIsPopupOpen(false);\n    setValues({\n      nameError: null,\n      emailError: null,\n      phoneError: null\n    });\n  }\n\n  React.useEffect(() => {\n    setCards(cardsJSON.product);\n  }, [cardsJSON.product]);\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__header\">Welcome to CHAIR STORE</h1>\n      <div className=\"app__grid\">\n        {cards.map((card) =>\n          <Card\n            key={card.id}\n            card={card}\n            onClick={handlerCardButtonClick}\n          />)}\n        </div>\n      {isPopupOpen \n        ? <Popup \n        onClick={handleSubmit}\n        value={values}\n        error={errors}\n        isClosed={closePopup}\n        onChange={handleInputChange}\n        /> \n        : \"\"}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/elena/Documents/тестовые задания/процессы/react-chair-store-frontend/src/reportWebVitals.js",[],"/Users/elena/Documents/тестовые задания/процессы/react-chair-store-frontend/src/components/Card.jsx",[],"/Users/elena/Documents/тестовые задания/процессы/react-chair-store-frontend/src/components/Popup.jsx",[],["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":5,"column":8,"nodeType":"36","messageId":"37","endLine":5,"endColumn":15},{"ruleId":"30","replacedBy":"38"},{"ruleId":"32","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'emailjs' is defined but never used.","Identifier","unusedVar",["40"],["41"],"no-global-assign","no-unsafe-negation"]